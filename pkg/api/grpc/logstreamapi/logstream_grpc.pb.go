// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: logstream.proto

package logstreamapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogStreamService_StreamLogs_FullMethodName = "/logstreamapi.LogStreamService/StreamLogs"
)

// LogStreamServiceClient is the client API for LogStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamServiceClient interface {
	// Agent establishes a client-streaming RPC and sends log data to principal
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogStreamData, LogStreamResponse], error)
}

type logStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamServiceClient(cc grpc.ClientConnInterface) LogStreamServiceClient {
	return &logStreamServiceClient{cc}
}

func (c *logStreamServiceClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LogStreamData, LogStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LogStreamService_ServiceDesc.Streams[0], LogStreamService_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LogStreamData, LogStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamService_StreamLogsClient = grpc.ClientStreamingClient[LogStreamData, LogStreamResponse]

// LogStreamServiceServer is the server API for LogStreamService service.
// All implementations must embed UnimplementedLogStreamServiceServer
// for forward compatibility.
type LogStreamServiceServer interface {
	// Agent establishes a client-streaming RPC and sends log data to principal
	StreamLogs(grpc.ClientStreamingServer[LogStreamData, LogStreamResponse]) error
	mustEmbedUnimplementedLogStreamServiceServer()
}

// UnimplementedLogStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogStreamServiceServer struct{}

func (UnimplementedLogStreamServiceServer) StreamLogs(grpc.ClientStreamingServer[LogStreamData, LogStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogStreamServiceServer) mustEmbedUnimplementedLogStreamServiceServer() {}
func (UnimplementedLogStreamServiceServer) testEmbeddedByValue()                          {}

// UnsafeLogStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamServiceServer will
// result in compilation errors.
type UnsafeLogStreamServiceServer interface {
	mustEmbedUnimplementedLogStreamServiceServer()
}

func RegisterLogStreamServiceServer(s grpc.ServiceRegistrar, srv LogStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedLogStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogStreamService_ServiceDesc, srv)
}

func _LogStreamService_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogStreamServiceServer).StreamLogs(&grpc.GenericServerStream[LogStreamData, LogStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LogStreamService_StreamLogsServer = grpc.ClientStreamingServer[LogStreamData, LogStreamResponse]

// LogStreamService_ServiceDesc is the grpc.ServiceDesc for LogStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logstreamapi.LogStreamService",
	HandlerType: (*LogStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _LogStreamService_StreamLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "logstream.proto",
}
